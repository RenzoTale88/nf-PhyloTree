
process {   
    cpus = 1   
    memory = '2G'   
    errorStrategy = { task.attempt <= 2 ? "retry" : "ignore" }   
    maxRetries = 2 
    maxErrors = '-1'
  
    withLabel: small{
      cpus =  1
      memory = {
        def baseMem = 8.GB * task.attempt
        if (params.max_memory){
          baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
        } else {
          baseMem
        }
      }
      time = {
        def baseTime = 4.h * task.attempt
        if (params.max_time){
          baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
        } else {
          baseTime
        }
      }
    }
    withLabel: medium{
      cpus = 1
      memory = {
        def baseMem = 16.GB * task.attempt
        if (params.max_memory){
          baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
        } else {
          baseMem
        }
      }
      time = {
        def baseTime = 8.h * task.attempt
        if (params.max_time){
          baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
        } else {
          baseTime
        }
      }
    }
    withLabel: large{
      cpus = 4
      memory = {
        def baseMem = 64.GB * task.attempt
        if (params.max_memory){
          baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
        } else {
          baseMem
        }
      }
      time = {
        def baseTime = 12.h * task.attempt
        if (params.max_time){
          baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
        } else {
          baseTime
        }
      }
    }
    withLabel: vlarge{
      cpus = 4
      memory = {
        def baseMem = 128.GB * task.attempt
        if (params.max_memory){
          baseMem.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1 ? params.max_memory as nextflow.util.MemoryUnit : baseMem
        } else {
          baseMem
        }
      }
      time = {
        def baseTime = 96.h * task.attempt
        if (params.max_time){
          baseTime.compareTo(params.max_time as nextflow.util.Duration) == 1 ? params.max_time as nextflow.util.Duration : baseTime
        } else {
          baseTime
        }
      }
    }
}
